datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model User {
  id        String   @id
  email     String   @unique
  name      String?
  avatar    String?
  credits   Int      @default(10)
  collections Collection[]
  createdAt DateTime @default(now())
  carDesigns CarDesign[]
  cars      Car[]
  votes     Vote[]
}
model Collection {
  id          String @id @default(cuid())
  title       String
  description String
  cars        Car[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model CarDesign {
  id          String @id @default(cuid())
  title       String
  imageUrl    String
  likes       Int    @default(0)
  comments    Int    @default(0)
  createdAt   DateTime @default(now())
  creator     User   @relation(fields: [creatorId], references: [id])
  creatorId   String
}
model Car {
  id          String   @id @default(cuid())
  userId      String
  imageUrl    String?
  title       String
  type        String
  description String
  style       String
  bodyColor      String     @default("#000000")
  wheelSize      Int        @default(17)
  spoiler        Boolean    @default(false)
  lowered        Boolean    @default(false)
  backgroundScene String    @default("city")
  timeOfDay      String     @default("day")
  status      CarStatus @default(PENDING)
  replicateId String?
  collection  Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  likes       Int        @default(0)
  featured    Boolean  @default(false)
  votes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime   @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  favorites   Favorite[]
  votedBy     Vote[]
  @@index([votes(sort: Desc)])
}
model Favorite {
  id     String @id @default(uuid())
  userId String
  carId  String
  car    Car    @relation(fields: [carId], references: [id])

  @@unique([userId, carId])
}
model Vote {
  id     String @id @default(cuid())
  carId  String
  userId String
  car    Car    @relation(fields: [carId], references: [id])

  @@unique([carId, userId])
  User User[]
}
enum CarStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}